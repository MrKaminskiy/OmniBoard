import { NextRequest, NextResponse } from 'next/server'
// import { createClient } from '@/lib/supabase-server'

const CTSS_API_URL = process.env.NEXT_PUBLIC_CTSS_API_URL || 'https://ctss-production.up.railway.app'
const CTSS_API_KEY = process.env.CTSS_API_KEY

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω —Å Binance
async function getCurrentPrice(symbol: string): Promise<number | null> {
  try {
    const response = await fetch(`https://api.binance.com/api/v3/ticker/price?symbol=${symbol}`);
    if (!response.ok) return null;
    
    const data = await response.json();
    return parseFloat(data.price);
  } catch (error) {
    console.error(`Error fetching price for ${symbol}:`, error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
function calculatePriceChange(entryPrice: number, currentPrice: number): string {
  if (!entryPrice || !currentPrice) return '';
  
  const change = ((currentPrice - entryPrice) / entryPrice) * 100;
  const sign = change >= 0 ? '+' : '';
  return `${sign}${change.toFixed(2)}%`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö CTSS –≤ —Ñ–æ—Ä–º–∞—Ç OmniBoard
function transformCTSSSignal(ctssSignal: any) {
  console.log('üîÑ Transforming signal:', ctssSignal.id, ctssSignal.parsed_pair)
  
  // –ü–∞—Ä—Å–∏–º TP levels –∏–∑ —Å—Ç—Ä–æ–∫–∏ JSON
  let tpLevels = [];
  try {
    if (ctssSignal.parsed_tp_levels) {
      console.log('üìä Parsing TP levels:', ctssSignal.parsed_tp_levels)
      const parsed = JSON.parse(ctssSignal.parsed_tp_levels);
      tpLevels = parsed.map((tp: any, index: number) => ({
        level: index + 1,
        price: parseFloat(tp.price),
        hit: tp.status === 'HIT',
        hit_at: tp.status === 'HIT' ? tp.hit_at : undefined,
        confidence: parseFloat(tp.confidence) // –ö–∞–∂–¥—ã–π TP –∏–º–µ–µ—Ç —Å–≤–æ–π confidence
      }));
      console.log('‚úÖ Parsed TP levels:', tpLevels)
    }
  } catch (error) {
    console.error('‚ùå Error parsing TP levels:', error, 'Raw data:', ctssSignal.parsed_tp_levels)
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ TP levels
  let status = 'ACTIVE';
  if (tpLevels.length > 0) {
    const allHit = tpLevels.every((tp: any) => tp.hit);
    const someHit = tpLevels.some((tp: any) => tp.hit);
    
    if (allHit) {
      status = 'TP_HIT';
    } else if (someHit) {
      status = 'ACTIVE'; // –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω
    }
  }

  const transformed = {
    id: ctssSignal.id.toString(),
    source: 'telegram' as const,
    pair: ctssSignal.parsed_pair || 'UNKNOWN',
    timeframe: ctssSignal.parsed_timeframe,
    direction: ctssSignal.parsed_direction as 'LONG' | 'SHORT',
    entry_price: ctssSignal.parsed_entry_price ? parseFloat(ctssSignal.parsed_entry_price) : undefined,
    dca_price: ctssSignal.parsed_dca_price ? parseFloat(ctssSignal.parsed_dca_price) : undefined,
    stop_loss: ctssSignal.parsed_stop_loss ? parseFloat(ctssSignal.parsed_stop_loss) : undefined,
    tp_levels: tpLevels,
    current_price: undefined, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
    price_change_percent: undefined, // –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ–∑–∂–µ
    status: status as 'ACTIVE' | 'TP_HIT' | 'SL_HIT' | 'CLOSED' | 'CANCELLED',
    confidence: undefined, // –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–π confidence, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É –∫–∞–∂–¥–æ–≥–æ TP
    raw_data: {
      channel_id: ctssSignal.channel_id,
      message_id: ctssSignal.message_id,
      raw_text: ctssSignal.raw_text,
      hash: ctssSignal.hash
    },
    metadata: {
      ts: ctssSignal.ts,
      channel_id: ctssSignal.channel_id,
      message_id: ctssSignal.message_id
    },
    created_at: ctssSignal.created_at,
    updated_at: ctssSignal.updated_at
  };

  console.log('‚úÖ Transformed signal:', transformed.id, transformed.pair, transformed.direction)
  return transformed;
}

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üöÄ Starting /api/signals/[id] request for ID:', params.id)
    
    if (!CTSS_API_KEY) {
      console.error('‚ùå CTSS_API_KEY environment variable is not set')
      return NextResponse.json({ 
        error: 'CTSS API key not configured. Please check environment variables.' 
      }, { status: 500 });
    }

    const { id: signalId } = params

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ CTSS API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    }

    if (CTSS_API_KEY) {
      headers['X-API-Key'] = CTSS_API_KEY;
    }

    console.log(`üåê Fetching signal ${signalId} from CTSS: ${CTSS_API_URL}/api/signals/${signalId}`)

    const ctssResponse = await fetch(`${CTSS_API_URL}/api/signals/${signalId}`, { headers });

    console.log('üì° CTSS response status:', ctssResponse.status)

    if (!ctssResponse.ok) {
      let errorData = {};
      try {
        errorData = await ctssResponse.json();
      } catch (jsonError) {
        console.error('Failed to parse CTSS error response as JSON for single signal:', jsonError);
        errorData = { error: ctssResponse.statusText || 'Unknown error from CTSS' };
      }
      console.error('‚ùå CTSS API error for single signal:', errorData)
      return NextResponse.json({ error: errorData.error || 'Failed to fetch signal from CTSS' }, { status: ctssResponse.status });
    }

    const ctssData = await ctssResponse.json();
    console.log('‚úÖ CTSS response received for signal:', ctssData.data?.id)

    if (!ctssData.data) {
      return NextResponse.json({ error: 'Signal not found' }, { status: 404 });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ CTSS –≤ —Ñ–æ—Ä–º–∞—Ç OmniBoard
    const transformedSignal = transformCTSSSignal(ctssData.data);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    console.log('üí∞ Fetching current price for:', transformedSignal.pair)
    const currentPrice = await getCurrentPrice(transformedSignal.pair);
    transformedSignal.current_price = currentPrice;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    if (transformedSignal.entry_price && currentPrice) {
      transformedSignal.price_change_percent = calculatePriceChange(transformedSignal.entry_price, currentPrice);
    }

    console.log('‚úÖ Signal details processed:', {
      id: transformedSignal.id,
      pair: transformedSignal.pair,
      direction: transformedSignal.direction,
      currentPrice: transformedSignal.current_price,
      priceChange: transformedSignal.price_change_percent
    })

    return NextResponse.json({ 
      success: true, 
      data: transformedSignal 
    });

  } catch (error: any) {
    console.error(`üí• Fatal error in /api/signals/${params.id}:`, {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    return NextResponse.json({ 
      error: error.message || 'Internal Server Error',
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }, { status: 500 });
  }
}