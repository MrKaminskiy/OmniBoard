import { NextRequest, NextResponse } from 'next/server'
// import { createClient } from '@/lib/supabase-server'

export const runtime = 'edge'

const CTSS_API_URL = process.env.NEXT_PUBLIC_CTSS_API_URL || 'https://ctss-production.up.railway.app'
const CTSS_API_KEY = process.env.CTSS_API_KEY

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω —Å Binance
async function getCurrentPrice(symbol: string): Promise<number | null> {
  try {
    console.log(`üîç Fetching price for symbol: ${symbol}`);
    const url = `https://api.binance.com/api/v3/ticker/price?symbol=${symbol.toUpperCase()}`;
    console.log(`üåê Request URL: ${url}`);
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'OmniBoard/1.0'
      },
      // –î–æ–±–∞–≤–ª—è–µ–º timeout
      signal: AbortSignal.timeout(5000)
    });
    
    console.log(`üì° Response status: ${response.status} ${response.statusText}`);
    
    if (!response.ok) {
      console.warn(`Failed to fetch price for ${symbol}: ${response.status} ${response.statusText}`);
      const errorText = await response.text();
      console.warn(`Error response body: ${errorText}`);
      return null;
    }
    
    const data = await response.json();
    console.log(`üìä Raw response for ${symbol}:`, data);
    
    const price = parseFloat(data.price);
    console.log(`‚úÖ Successfully parsed price for ${symbol}: $${price}`);
    return price;
  } catch (error) {
    console.error(`‚ùå Error fetching price for ${symbol}:`, error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
function calculatePriceChange(entryPrice: number, currentPrice: number): string {
  if (!entryPrice || !currentPrice) return '';
  
  const change = ((currentPrice - entryPrice) / entryPrice) * 100;
  const sign = change >= 0 ? '+' : '';
  return `${sign}${change.toFixed(2)}%`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö CTSS –≤ —Ñ–æ—Ä–º–∞—Ç OmniBoard
function transformCTSSSignal(ctssSignal: any) {
  console.log('üîÑ Transforming signal:', ctssSignal.id, ctssSignal.parsed_pair)
  
  // –ü–∞—Ä—Å–∏–º TP levels –∏–∑ —Å—Ç—Ä–æ–∫–∏ JSON
  let tpLevels = [];
  try {
    if (ctssSignal.parsed_tp_levels) {
      console.log('üìä Parsing TP levels:', ctssSignal.parsed_tp_levels)
      const parsed = JSON.parse(ctssSignal.parsed_tp_levels);
      tpLevels = parsed.map((tp: any, index: number) => ({
        level: index + 1,
        price: parseFloat(tp.price),
        hit: tp.status === 'HIT',
        hit_at: tp.status === 'HIT' ? tp.hit_at : undefined,
        confidence: parseFloat(tp.confidence) // –ö–∞–∂–¥—ã–π TP –∏–º–µ–µ—Ç —Å–≤–æ–π confidence
      }));
      console.log('‚úÖ Parsed TP levels:', tpLevels)
    }
  } catch (error) {
    console.error('‚ùå Error parsing TP levels:', error, 'Raw data:', ctssSignal.parsed_tp_levels)
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ TP levels
  let status = 'ACTIVE';
  if (tpLevels.length > 0) {
    const allHit = tpLevels.every((tp: any) => tp.hit);
    const someHit = tpLevels.some((tp: any) => tp.hit);
    
    if (allHit) {
      status = 'TP_HIT';
    } else if (someHit) {
      status = 'ACTIVE'; // –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω
    }
  }

  const transformed = {
    id: ctssSignal.id.toString(),
    source: 'telegram' as const,
    pair: ctssSignal.parsed_pair || 'UNKNOWN',
    timeframe: ctssSignal.parsed_timeframe,
    direction: ctssSignal.parsed_direction as 'LONG' | 'SHORT',
    entry_price: ctssSignal.parsed_entry_price ? parseFloat(ctssSignal.parsed_entry_price) : undefined,
    dca_price: ctssSignal.parsed_dca_price ? parseFloat(ctssSignal.parsed_dca_price) : undefined,
    stop_loss: ctssSignal.parsed_stop_loss ? parseFloat(ctssSignal.parsed_stop_loss) : undefined,
    tp_levels: tpLevels,
    current_price: undefined, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
    price_change_percent: undefined, // –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ–∑–∂–µ
    status: status as 'ACTIVE' | 'TP_HIT' | 'SL_HIT' | 'CLOSED' | 'CANCELLED',
    confidence: undefined, // –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–π confidence, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É –∫–∞–∂–¥–æ–≥–æ TP
    raw_data: {
      channel_id: ctssSignal.channel_id,
      message_id: ctssSignal.message_id,
      raw_text: ctssSignal.raw_text,
      hash: ctssSignal.hash
    },
    metadata: {
      ts: ctssSignal.ts,
      channel_id: ctssSignal.channel_id,
      message_id: ctssSignal.message_id
    },
    created_at: ctssSignal.created_at,
    updated_at: ctssSignal.updated_at
  };

  console.log('‚úÖ Transformed signal:', transformed.id, transformed.pair, transformed.direction)
  return transformed;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –ø–∞—Ä–∞–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã
function groupSignalsByPair(signals: any[]) {
  const groups = new Map();
  
  signals.forEach(signal => {
    const pairKey = signal.pair;
    
    if (!groups.has(pairKey)) {
      groups.set(pairKey, []);
    }
    
    groups.get(pairKey).push(signal);
  });
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É —Å–∏–≥–Ω–∞–ª–æ–≤ (LONG ‚Üí SHORT –Ω–∞ —Ç–æ–º –∂–µ –¢–§)
  groups.forEach((pairSignals, pair) => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    pairSignals.sort((a: any, b: any) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());
    
    const activeSignals = new Map(); // timeframe -> signal
    
    pairSignals.forEach((signal: any) => {
      const tfKey = signal.timeframe;
      
      if (activeSignals.has(tfKey)) {
        const existingSignal = activeSignals.get(tfKey);
        
        // –ï—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–∏–≥–Ω–∞–ª
        if (existingSignal.direction !== signal.direction) {
          existingSignal.status = 'CANCELLED';
          console.log(`üö´ Cancelled signal ${existingSignal.id} (${existingSignal.direction}) due to opposite ${signal.direction}`);
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ –¢–§
      activeSignals.set(tfKey, signal);
    });
  });
  
  return groups;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ (–ø–æ hash)
function removeDuplicateSignals(signals: any[]) {
  const seen = new Set();
  const unique = [];
  
  for (const signal of signals) {
    const hash = signal.raw_data?.hash || `${signal.pair}-${signal.timeframe}-${signal.created_at}`;
    if (!seen.has(hash)) {
      seen.add(hash);
      unique.push(signal);
    } else {
      console.log(`üîÑ Skipping duplicate signal: ${signal.id} (hash: ${hash})`);
    }
  }
  
  return unique;
}

export async function GET(request: NextRequest) {
  console.log('üöÄ Starting /api/signals request')
  
  try {
    console.log('üìã Request URL:', request.url)
    console.log('üîë CTSS API URL:', CTSS_API_URL)
    console.log('üîë CTSS API Key available:', !!CTSS_API_KEY)
    
    if (!CTSS_API_KEY) {
      console.error('‚ùå CTSS_API_KEY environment variable is not set')
      return NextResponse.json({ 
        error: 'CTSS API key not configured. Please check environment variables.' 
      }, { status: 500 });
    }
    
    console.log('üîë CTSS API Key (first 10 chars):', CTSS_API_KEY.substring(0, 10) + '...')

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const { searchParams } = new URL(request.url)
    const limit = Math.min(parseInt(searchParams.get('limit') || '20'), 100) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 20
    const offset = parseInt(searchParams.get('offset') || '0')
    const pair = searchParams.get('pair')
    const status = searchParams.get('status')
    const direction = searchParams.get('direction')
    const timeframe = searchParams.get('timeframe') // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–æ–ª—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ

    console.log('üìä Request params:', { limit, offset, pair, status, direction, timeframe })

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ CTSS API
    // CTSS API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç, –ø–æ—ç—Ç–æ–º—É –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
    const ctssUrl = new URL(`${CTSS_API_URL}/api/signals`)
    
    if (pair) ctssUrl.searchParams.set('pair', pair)
    if (status) ctssUrl.searchParams.set('status', status)
    if (direction) ctssUrl.searchParams.set('direction', direction)
    if (timeframe) ctssUrl.searchParams.set('timeframe', timeframe)

    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    }

    // –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á
    if (CTSS_API_KEY) {
      headers['X-API-Key'] = CTSS_API_KEY;
    }

    console.log('üåê Making request to CTSS:', ctssUrl.toString())
    console.log('üîë Request headers:', { ...headers, 'X-API-Key': '***' })

    const ctssResponse = await fetch(ctssUrl.toString(), { headers });

    console.log('üì° CTSS response status:', ctssResponse.status)
    console.log('üì° CTSS response headers:', Object.fromEntries(ctssResponse.headers.entries()))

    if (!ctssResponse.ok) {
      console.error('‚ùå CTSS API error:', ctssResponse.status, ctssResponse.statusText)
      const errorData = await ctssResponse.json().catch(() => ({ error: 'Unknown error' }));
      console.error('‚ùå CTSS error data:', errorData)
      return NextResponse.json({ error: errorData.error || 'Failed to fetch signals from CTSS' }, { status: ctssResponse.status });
    }

    const ctssData = await ctssResponse.json();
    console.log('‚úÖ CTSS response received')
    console.log('üìä CTSS data structure:', {
      hasData: !!ctssData.data,
      dataLength: ctssData.data?.length || 0,
      count: ctssData.count,
      success: ctssData.success,
      firstSignal: ctssData.data?.[0] ? {
        id: ctssData.data[0].id,
        pair: ctssData.data[0].parsed_pair,
        direction: ctssData.data[0].parsed_direction
      } : null
    })

    if (!ctssData.data || !Array.isArray(ctssData.data)) {
      console.error('‚ùå Invalid CTSS data format:', ctssData)
      return NextResponse.json({ error: 'Invalid data format from CTSS' }, { status: 500 });
    }

    console.log('üîÑ Starting data transformation...')
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ CTSS –≤ —Ñ–æ—Ä–º–∞—Ç OmniBoard
    const transformedSignals = ctssData.data.map(transformCTSSSignal);
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤
    const uniqueSignals = removeDuplicateSignals(transformedSignals);
    console.log(`üîÑ Removed duplicates: ${transformedSignals.length} ‚Üí ${uniqueSignals.length}`);

    console.log('üîÑ Grouping signals by pair...')
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –ø–∞—Ä–∞–º
    const groupedSignals = groupSignalsByPair(uniqueSignals);

    console.log('üí∞ Fetching current prices...')
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä
    const uniquePairs = [...new Set(uniqueSignals.map(s => s.pair))];
    const pricePromises = uniquePairs.map(async (pair) => {
      const price = await getCurrentPrice(pair); // pair —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç USDT
      return { pair, price };
    });
    
    const prices = await Promise.all(pricePromises);
    const priceMap = new Map(prices.map(p => [p.pair, p.price]));
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    uniqueSignals.forEach(signal => {
      signal.current_price = priceMap.get(signal.pair) || null;
      if (signal.entry_price && signal.current_price) {
        signal.price_change_percent = calculatePriceChange(signal.entry_price, signal.current_price);
      }
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
    let filteredSignals = uniqueSignals;
    
    if (pair) {
      filteredSignals = filteredSignals.filter(signal => 
        signal.pair.toLowerCase().includes(pair.toLowerCase())
      );
    }
    
    if (status) {
      filteredSignals = filteredSignals.filter(signal => 
        signal.status === status
      );
    }
    
    if (direction) {
      filteredSignals = filteredSignals.filter(signal => 
        signal.direction === direction
      );
    }
    
    if (timeframe) {
      filteredSignals = filteredSignals.filter(signal => 
        signal.timeframe === timeframe
      );
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const paginatedSignals = filteredSignals.slice(offset, offset + limit);

    console.log('‚úÖ Processing completed:', {
      originalCount: ctssData.data.length,
      transformedCount: uniqueSignals.length,
      groupedPairs: groupedSignals.size,
      firstTransformed: uniqueSignals[0] ? {
        id: uniqueSignals[0].id,
        pair: uniqueSignals[0].pair,
        direction: uniqueSignals[0].direction,
        tpLevelsCount: uniqueSignals[0].tp_levels.length,
        currentPrice: uniqueSignals[0].current_price,
        priceChange: uniqueSignals[0].price_change_percent
      } : null
    })

    const response = {
      success: true,
      data: paginatedSignals,
      groupedByPair: Object.fromEntries(groupedSignals),
      count: filteredSignals.length,
      pagination: {
        limit,
        offset,
        total: filteredSignals.length,
        hasMore: offset + limit < filteredSignals.length
      }
    };

    console.log('üöÄ Returning response:', {
      success: response.success,
      dataLength: response.data.length,
      groupedPairs: Object.keys(response.groupedByPair).length,
      count: response.count
    })

    return NextResponse.json(response);

  } catch (error: any) {
    console.error('üí• Fatal error in /api/signals:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    return NextResponse.json({ 
      error: error.message || 'Internal Server Error',
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }, { status: 500 });
  }
}