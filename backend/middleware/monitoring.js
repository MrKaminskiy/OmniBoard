/**
 * Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–µ—Ç—Ä–∏–∫
 */

// –ü—Ä–æ—Å—Ç–æ–π in-memory store –¥–ª—è –º–µ—Ç—Ä–∏–∫
class MetricsStore {
    constructor() {
        this.metrics = {
            requests: {
                total: 0,
                byMethod: {},
                byEndpoint: {},
                byStatus: {}
            },
            responseTime: {
                total: 0,
                count: 0,
                min: Infinity,
                max: -Infinity,
                byEndpoint: {}
            },
            errors: {
                total: 0,
                byType: {},
                byEndpoint: {}
            },
            activeConnections: 0,
            uptime: Date.now()
        };
        
        this.resetInterval = null;
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    incrementRequest(method, endpoint, status) {
        this.metrics.requests.total++;
        
        // –ü–æ –º–µ—Ç–æ–¥—É
        this.metrics.requests.byMethod[method] = (this.metrics.requests.byMethod[method] || 0) + 1;
        
        // –ü–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        this.metrics.requests.byEndpoint[endpoint] = (this.metrics.requests.byEndpoint[endpoint] || 0) + 1;
        
        // –ü–æ —Å—Ç–∞—Ç—É—Å—É
        this.metrics.requests.byStatus[status] = (this.metrics.requests.byStatus[status] || 0) + 1;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    addResponseTime(endpoint, responseTime) {
        this.metrics.responseTime.total += responseTime;
        this.metrics.responseTime.count++;
        
        if (responseTime < this.metrics.responseTime.min) {
            this.metrics.responseTime.min = responseTime;
        }
        if (responseTime > this.metrics.responseTime.max) {
            this.metrics.responseTime.max = responseTime;
        }
        
        // –ü–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        if (!this.metrics.responseTime.byEndpoint[endpoint]) {
            this.metrics.responseTime.byEndpoint[endpoint] = {
                total: 0,
                count: 0,
                min: Infinity,
                max: -Infinity
            };
        }
        
        const endpointMetrics = this.metrics.responseTime.byEndpoint[endpoint];
        endpointMetrics.total += responseTime;
        endpointMetrics.count++;
        
        if (responseTime < endpointMetrics.min) {
            endpointMetrics.min = responseTime;
        }
        if (responseTime > endpointMetrics.max) {
            endpointMetrics.max = responseTime;
        }
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    incrementError(errorType, endpoint) {
        this.metrics.errors.total++;
        
        this.metrics.errors.byType[errorType] = (this.metrics.errors.byType[errorType] || 0) + 1;
        this.metrics.errors.byEndpoint[endpoint] = (this.metrics.errors.byEndpoint[endpoint] || 0) + 1;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    setActiveConnections(count) {
        this.metrics.activeConnections = count;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
    getMetrics() {
        const now = Date.now();
        const uptime = now - this.metrics.uptime;
        
        return {
            ...this.metrics,
            uptime,
            uptimeFormatted: this.formatUptime(uptime),
            averages: this.calculateAverages(uptime),
            timestamp: new Date(now).toISOString()
        };
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    calculateAverages(uptime) {
        const avgResponseTime = this.metrics.responseTime.count > 0 
            ? this.metrics.responseTime.total / this.metrics.responseTime.count 
            : 0;
            
        const avgRequestsPerSecond = uptime > 0 
            ? this.metrics.requests.total / (uptime / 1000) 
            : 0;
            
        return {
            avgResponseTime: Math.round(avgResponseTime * 100) / 100,
            avgRequestsPerSecond: Math.round(avgRequestsPerSecond * 100) / 100
        };
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º uptime
    formatUptime(ms) {
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        
        if (days > 0) return `${days}d ${hours % 24}h ${minutes % 60}m`;
        if (hours > 0) return `${hours}h ${minutes % 60}m`;
        if (minutes > 0) return `${minutes}m ${seconds % 60}s`;
        return `${seconds}s`;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ (–∫–∞–∂–¥—ã–π —á–∞—Å)
    startResetTimer() {
        this.resetInterval = setInterval(() => {
            this.resetMetrics();
        }, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    resetMetrics() {
        this.metrics = {
            requests: {
                total: 0,
                byMethod: {},
                byEndpoint: {},
                byStatus: {}
            },
            responseTime: {
                total: 0,
                count: 0,
                min: Infinity,
                max: -Infinity,
                byEndpoint: {}
            },
            errors: {
                total: 0,
                byType: {},
                byEndpoint: {}
            },
            activeConnections: this.metrics.activeConnections,
            uptime: this.metrics.uptime
        };
        
        console.log('üîÑ Metrics reset');
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    stop() {
        if (this.resetInterval) {
            clearInterval(this.resetInterval);
            this.resetInterval = null;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ—Ç—Ä–∏–∫
const metricsStore = new MetricsStore();

// Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const requestTracker = (req, res, next) => {
    const startTime = Date.now();
    const method = req.method;
    const endpoint = req.path;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    metricsStore.setActiveConnections(metricsStore.metrics.activeConnections + 1);
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
    const originalSend = res.send;
    res.send = function(data) {
        const responseTime = Date.now() - startTime;
        const status = res.statusCode;
        
        // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metricsStore.incrementRequest(method, endpoint, status);
        metricsStore.addResponseTime(endpoint, responseTime);
        
        // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        metricsStore.setActiveConnections(metricsStore.metrics.activeConnections - 1);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        res.setHeader('X-Response-Time', `${responseTime}ms`);
        res.setHeader('X-Request-ID', req.id || 'unknown');
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        originalSend.call(this, data);
    };
    
    next();
};

// Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
const errorTracker = (err, req, res, next) => {
    const endpoint = req.path;
    const errorType = err.name || 'UnknownError';
    
    metricsStore.incrementError(errorType, endpoint);
    
    next(err);
};

// Middleware –¥–ª—è health check —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
const healthCheckWithMetrics = (req, res) => {
    try {
        const metrics = metricsStore.getMetrics();
        
        res.json({
            status: 'ok',
            timestamp: new Date().toISOString(),
            uptime: metrics.uptimeFormatted || '0s',
            metrics: {
                requests: {
                    total: metrics.requests.total || 0,
                    perSecond: metrics.averages?.avgRequestsPerSecond || 0
                },
                responseTime: {
                    average: metrics.averages?.avgResponseTime || 0,
                    min: metrics.responseTime.min || 0,
                    max: metrics.responseTime.max || 0
                },
                errors: {
                    total: metrics.errors.total || 0
                },
                activeConnections: metrics.activeConnections || 0
            }
        });
    } catch (error) {
        // Fallback –µ—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        res.json({
            status: 'ok',
            timestamp: new Date().toISOString(),
            uptime: '0s',
            metrics: {
                requests: { total: 0, perSecond: 0 },
                responseTime: { average: 0, min: 0, max: 0 },
                errors: { total: 0 },
                activeConnections: 0
            }
        });
    }
};

// Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
const detailedMetrics = (req, res) => {
    const metrics = metricsStore.getMetrics();
    
    res.json({
        status: 'ok',
        data: metrics,
        timestamp: new Date().toISOString()
    });
};

// Middleware –¥–ª—è —Å–±—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
const resetMetrics = (req, res) => {
    metricsStore.resetMetrics();
    
    res.json({
        status: 'ok',
        message: 'Metrics reset successfully',
        timestamp: new Date().toISOString()
    });
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä —Å–±—Ä–æ—Å–∞
metricsStore.startResetTimer();

module.exports = {
    metricsStore,
    requestTracker,
    errorTracker,
    healthCheckWithMetrics,
    detailedMetrics,
    resetMetrics
};
